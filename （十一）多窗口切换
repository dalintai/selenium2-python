参考博客：https://www.jb51.net/article/140483.htm

===========================================================================

第一种方法：

使用场景：

打开多个窗口，需要定位到新打开的窗口

使用方法：

# 获取打开的多个窗口句柄
windows = driver.window_handles
# 切换到当前最新打开的窗口
driver.switch_to.window(windows[-1])

举例说明：

	
# _._ coding:utf-8 _._

from selenium import webdriver
import time
# 打开课工场网站主页【第一个窗口】
driver = webdriver.Chrome()
driver.get('http://www.kgc.cn/')
driver.maximize_window()
# 点击全部课程，进入课程库【第二个窗口】
driver.find_element_by_link_text('全部课程').click()
time.sleep(3)
# 使用第一种方法切换浏览器【切换到第二个窗口】
windows = driver.window_handles
driver.switch_to.window(windows[-1])
time.sleep(3)
# 点击课程库中的某个课程，进入课程详情界面【在第二个窗口页面进行元素点击操作，来判断窗口是否切换成功】
driver.find_element_by_xpath('//*[@id="yw1"]/ul/li[2]').click()
time.sleep(3)
# 关闭浏览器
driver.quit()
print('测试通过')

=========================================================

第二种方法：

使用场景：

打开两个窗口，需要定位到新打开的窗口

使用方法：

# 获得打开的第一个窗口句柄
window_1 = driver.current_window_handle
# 获得打开的所有的窗口句柄
windows = driver.window_handles
# 切换到最新的窗口
for current_window in windows:
 if current_window != window_1:
  driver.switch_to.window(current_window)

举例说明：
	
# _._ coding:utf-8 _._

from selenium import webdriver
import time
from selenium import webdriver
import time
# 打开课工场网站主页【第一个窗口】
driver = webdriver.Chrome()
driver.get('http://www.kgc.cn/')
driver.maximize_window()
# 点击全部课程，进入课程库【第二个窗口】
driver.find_element_by_link_text('全部课程').click()
time.sleep(3)
# 使用第二种方法切换浏览器【切换到第二个窗口】
window_1 = driver.current_window_handle
windows = driver.window_handles
for current_window in windows:
 if current_window != window_1:
  driver.switch_to.window(current_window)
time.sleep(3)
# 点击课程库中的某个课程，进入课程详情界面【在第二个窗口页面进行元素点击操作，来判断窗口是否切换成功】
driver.find_element_by_xpath('//*[@id="yw1"]/ul/li[2]').click()
time.sleep(3)
# 关闭浏览器
driver.quit()
print('测试通过')

========================================================================================================

# coding=utf-8
#编码说明一定是要#空格coding=utf-8，之前#之前没有空格，所以后面代码的text文本定位找不到

from selenium import webdriver
from time import sleep
driver = webdriver.Firefox()
driver.maximize_window
driver.implicitly_wait(5)
#隐形等待5秒

baidu = ("https://www.baidu.com")
driver.get(baidu)

sreach_windows = driver.current_window_handle
#获得窗口句柄


driver.find_element_by_link_text('登录').click()
driver.find_element_by_link_text("立即注册").click()
#通过文本形式进行定位

all_handles = driver.window_handles
# 获得当前所有打开的窗口的句柄

#handle是自定义的一个元素，设置一个handle元素在上面all_handle中循环
for handle in all_handles:
	#如果handle不等于all_handle的话就执行下面
    if handle != sreach_windows:
        driver.switch_to.window(handle)
        print('now register window!')
        driver.find_element_by_name("account").send_keys('username')
        driver.find_element_by_name('password').send_keys('password')
        time.sleep(10)
		
循环思路：
	第一步：首先将百度首页窗口进行赋值给sreach_windows
	第二步：对定义的值handle与sreach_windows在我们第二个窗口中循环判断（我们第二个窗口（all_handles）是获取的所有窗口），
		如果不等于，说明现在handle就不是百度首页窗口
	第三步：如果不是的话就获取当前窗口(因为一共有两个窗口获取，第一个就是百度首页窗口，第二个是所有窗口)，然后赋值给handle
	第四步：然后进行定位操作
说明：
	current_window_handle:获取当前窗口句柄
	window_handles:返回所有窗口句柄到当前会话
	switch_to.window():用户切换响应窗口，与表单切换中的switch_to。frame()类似，switch_to.window是窗口切换，而switch_to.frame是表单切换
	
	
