mac系统的生成报告代码：

# coding:utf-8
from selenium import webdriver
from time import sleep
#导入HTMLTestRunner的包
from HTMLTestRunner import HTMLTestRunner
import unittest
class T(unittest.TestCase):
	def setUp(self):
		option = webdriver.ChromeOptions()
		option.add_argument("headless")
		self.driver = webdriver.Chrome(chrome_options=option)
		#self.driver = webdriver.Chrome()
		self.baidu = ("https://www.baidu.com")
		self.driver.get(self.baidu)
	def tearDown(self):
		sleep(1)
		self.driver.quit()
	def test_test(self):
		driver = self.driver
		#driver.get(self.baidu)
		sleep(2)
		driver.find_element_by_id("kw").send_keys("slenium")
		driver.find_element_by_id("su").click()
	

if __name__=="__main__":
	#unittest.main()
	testunit = unittest.TestSuite()
  #addTest里面写入类（T）跟测试用例名称(test_test)
	testunit.addTest(T("test_test"))
  #两种路径都可以，os用的是linux，所以路径一定要多注意，不然会被强制转译
	#fp = open('/Users/dalintai/软件/12345.html','wb')
	fp = open('/Volumes/脚本/test2.html','wb')
	runner = HTMLTestRunner(stream=fp,
  #在命名title跟description输入中文前面可以加u，也可以不加，加u就是u'这是中文'
							title='自动化测试报告',
							description='测试用例执行详细：')
	runner.run(testunit)
	fp.close()
  
  ========================
  6-1 mac更新总结：
  1.第一主要坑就是在将HTMLTestRunner包导入，mac系统发现python路径很难找，并不能只通过单纯的文件查找，而且根据教程上说，只要导入到lib就可以，
  实际上是不行的， 一定要导入/site-packages下，然后通过一下方式：
    1.1输入python
    1.2输入import sys
    1.3输入print(sys.path)
事例代码如下：
1 C:\Users\dell>python
2 Python 3.5.1 (v3.5.1:37a07cee5969, Dec  6 2015, 01:54:25) [MSC v.1900 64 bit (AMD64)] on win32
3 Type "help", "copyright", "credits" or "license" for more information.
4 >>> import sys
5 >>> print(sys.path)
6 ['', 'C:\\Users\\dell\\AppData\\Local\\Programs\\Python\\Python35\\python35.zip', 'C:\\Users\\dell\\AppData\\Local\\Programs\\Python\\Python35\\DLLs',
  'C:\\Users\\dell\\AppData\\Local\\Programs\\Python\\Python35\\lib', 'C:\\Users\\dell\\AppData\\Local\\Programs\\Python\\Python35', 'C:\\Users\\dell\\
  AppData\\Local\\Programs\\Python\\Python35\\lib\\site-packages']

然后找到site-packages的路径，将修改后的代码复制进入。
参考博客：
https://www.jianshu.com/p/be09cde5b655
https://www.cnblogs.com/imyalost/p/7282802.html
  
2.最后进入python后输入：import HTMLTestRunner来测试是否起效。没反应就是可以的。


========================
 win系统的生成报告代码：
 
 
 # coding:utf-8
from selenium import webdriver
from time import sleep
import unittest
from HTMLTestRunner import HTMLTestRunner
class Baidu(unittest.TestCase):
	def setUp(self):
		self.driver = webdriver.Firefox()
		self.baid = ("https://www.baidu.com")
		self.driver.get(self.baid)
	def test_baidu_search(self):
		driver = self.driver
		driver.find_element_by_id("kw").send_keys("test")
		driver.find_element_by_id("su").click()
	def tearDown(self):
		sleep(2)
		self.driver.quit()

if __name__=="__main__":
	testunit = unittest.TestSuite()
	testunit.addTest(Baidu("test_baidu_search"))
#win的路径要比mac好些很多
	fp = open('C:/Users/Administrator/Desktop/123/result.html','wb')
	runner = HTMLTestRunner(stream=fp,
							title='test Title',
							description='case')
	runner.run(testunit)
	fp.close()
  
========================
6-1win更新总结：
1.win环境下报告是比较容易生成的，但会遇到一个问题，就是内容为空
最后发现，正常代码通过cmd方式可以正常运行，而使用Pycharm工具就无法正常生成，所以就是跟Pycharm编译器有极大关系
但是他妈的还没找到解决方法...
根据网上博客说明，可能是因为Pycharm没有执行main函数，在实际调试中，也确实发现没有输出print,所以可能是Pycharm
编译器的问题，后续详细切入Pycharm无法用HTMLTestRunner输出报告。
2.公司的pycharm可以正常输出报告，首先查看下python环境是否装了HTMLTestRunner，方法：
	2.1进入python
	2.2输入import HTMLTestRunner
3.解决方法：
	3.1先用python底下输出面板里面的Terminal测试HTMLTestRunner是否可用
	3.2然后再点击if旁边的运行，直接选择运行文件名.py
	3.3选择已经导入HTMLTestRunner包的python版本
4.问题分析：
	4.1主要第一是编辑器问题，可以尝试修改版本，可能主要是pycharm中的python环境中没有HTMLTestRunner的包
	4.2第二就是编辑器在运行的时候并不是直接运行py文件，而是运行了unittest框架里面的单个用例，同时也要考虑
	是不是在新建文件的目录没有在根目录或者文件层级有影响。
  
========================
其他技巧：
1.在用例中添加'''第一条用例'''然后查看报告，报告中会在执行的用例后面显示->test_testcase：第一条用例  
  
  
  
  
  
  
  
